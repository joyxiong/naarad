#!/usr/bin/env python
# coding=utf-8
"""
Â© 2013 LinkedIn Corp. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
"""

import argparse
import ConfigParser
import errno
import logging
import os
import sys
import threading

# Add src directory to path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'src')))

import naarad.utils
from naarad.metrics.metric import Metric
from naarad.reporting.diff import Diff
from naarad.metrics.gc_metric import GCMetric
from naarad.metrics.innotop_metric import INNOMetric
from naarad.metrics.sar_metric import SARMetric
from naarad.graphing import dygraphs
from naarad.reporting.report import Report
from naarad.reporting.diff import Diff, NaaradReport
from naarad.run_steps.run_step import Run_Step
from naarad.run_steps.local_cmd import Local_Cmd
import naarad.naarad_constants as CONSTANTS

try:
  from naarad.naarad_imports import metric_classes, aggregate_metric_classes, graphing_modules
except ImportError:
  metric_classes = {}
  graphing_modules = {}
  aggregate_metric_classes = {}
device_type_metrics = CONSTANTS.device_type_metrics
#Naarad pre-defined
metric_classes['GC'] = GCMetric
metric_classes['SAR'] = SARMetric
metric_classes['INNOTOP'] = INNOMetric

graphing_modules['dygraphs'] = dygraphs
graphing_modules['js'] = dygraphs
graphing_modules['javascript'] = dygraphs

Metric.graphing_modules = graphing_modules
Metric.device_types = device_type_metrics
Diff.graphing_modules = graphing_modules

version = "0.1"

template_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'templates'))
template_urls = {
    "template:gc": os.path.join(template_dir,"config-gc"),
    "template:sar": os.path.join(template_dir,"config-sar"),
    "template:innotop": os.path.join(template_dir,"config-inno")
    }

logger = logging.getLogger('naarad')

def init_logging(log_level):
  log_file = 'naarad.log'
  # clear the log file
  with open(log_file, 'w'):
    pass

  numeric_level = getattr(logging, log_level.upper(), None) if log_level else logging.INFO
  if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % log_level)
  
  logger.setLevel(logging.DEBUG)
  fh = logging.FileHandler(log_file)
  fh.setLevel(logging.DEBUG)
  ch = logging.StreamHandler()
  ch.setLevel(numeric_level)
  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
  fh.setFormatter(formatter)
  ch.setFormatter(formatter)
  logger.addHandler(fh)
  logger.addHandler(ch)

def read_naarad_templates():
  """
    Read $HOME/.naarad/templates.txt file to read user-defined template keys and related URLs
  """
  home_directory = os.getenv('HOME')
  template_file = os.path.join(home_directory, '.naarad', 'templates.txt')
  logger.info('Adding templates from: ' + template_file)
  if os.path.exists(template_file):
    with open(template_file,'r') as FH:
      for line in FH:
        template, url = [word.strip() for word in line.split()]
        if naarad.utils.is_valid_url(url):
          logger.warning('This line in .naarad/templates.txt does not contain correct URL.' + line + '. Continuing.')
          continue
        if not template.startswith('template:'):
          logger.warning('Template name in this line in .naarad/templates.txt does not follow the convention. Start the name with "template:" please.')
          continue
        if template in template_urls:
          logger.info('Template ' + template + ' exists as pre-defined in Naarad. Overriding the pre-defined template name.')
        logger.info('Adding template ' + template) 
        template_urls[template] = url


def print_usage():
  print ("Usage: "
               "\n To generate a diff report      : naarad -d report1 report2 -o <output_location> -c <optional: config-file> -e <optional: turn on exit code>"
               "\n To generate an analysis report : naarad -i <input_location> -o <output_location> -c <config_file> -e <optional: turn on exit code>")

def get_config_file(arg):
  """
    Helper function to extract the config file from arguments
  """
  # Download config if its a URL
  if naarad.utils.is_valid_url(arg):
    options_file = naarad.utils.download_file(arg)
  elif arg.startswith("template:"):
    #Its a template
    if arg in template_urls.keys():
      logger.info('Using template ' + arg + ' used from ' + template_urls[arg] )
      options_file = naarad.utils.download_file(template_urls[arg])
    else:
      sys.exit("ERROR: Template " + arg + " not found. Exiting...")
    with open(options_file, 'r') as FH:
      print "Config file used looks like this:"
      print "-------------"
      print FH.read()
      print "-------------"
  else:
    options_file = arg
  if not os.path.exists(options_file):
    sys.exit("ERROR: Config file " + options_file + " doesn't exist. If this is a URL, please use the fully qualified domain name\nExiting....")
  return options_file  

def main():
  metrics = []
  aggregate_metrics = [] 
  crossplots = []
  pre_run_steps = []
  in_run_steps = []
  post_run_steps = []
  workload_run_steps = []
  graph_timezone = None
  graphing_library = 'matplotlib'
  variables_dict = {}
  ts_start = None
  ts_end = None
  bin_path = os.path.dirname( __file__ )
  skip_plots = False

  arg_parser = argparse.ArgumentParser()
  arg_parser.add_argument('-c', '--config', help="file with specifications for each metric and graphs")
  arg_parser.add_argument('--start', help="Start time in the format of HH:MM:SS or YYYY-mm-dd_HH:MM:SS")
  arg_parser.add_argument('--end', help="End time in the format of HH:MM:SS or YYYY-mm-dd_HH:MM:SS")
  arg_parser.add_argument('-i', '--input_dir', help="input directory used to construct full path name of the metric infile")
  arg_parser.add_argument('-o', '--output_dir', help="output directory where the plots and Report.html will be generated")
  arg_parser.add_argument('-r', '--resource_path', help="output sub-directory where resources such as images/svg/csv etc will be stored", default='resources')
  arg_parser.add_argument('-V', '--variables', action="append", help="User defined variables (in form key=value) for substitution in the config file. Config should have the variable names in format %%(key)s")
  arg_parser.add_argument('-s', '--show_config', help="Print config associated with the provided template name", action="store_true")
  arg_parser.add_argument('-l', '--log', help="log level")
  arg_parser.add_argument('-d', '--diff', nargs=2, help="Specify the location of two naarad reports to diff separated by a space. Can be local or http(s) locations. The first report is used as a baseline.", metavar=("report-1", "report-2"))
  arg_parser.add_argument('-n', '--no_plots', help="Don't generate plot images. Useful when you only want SLA calculations. Note that on-demand charts can still be generated through client-charting.", action="store_true")
  arg_parser.add_argument('-e', '--exit_code', help="optional argument to enable exit_code for naarad", action="store_true")
  #TODO(Ritesh) : Print a list of all templates supported with descriptions
  #arg_parser.add_argument('-l', '--list_templates', help="List all template configs", action="store_true")

  args = arg_parser.parse_args()
  init_logging(args.log)

  if args:
    if args.no_plots:
      skip_plots = True
    if args.diff:
      if not args.output_dir:
        logger.error('No Output location specified')
        print_usage()
      else:
        diff_report = Diff([NaaradReport(args.diff[0], None), NaaradReport(args.diff[1], None)], 'diff', args.output_dir, os.path.join(args.output_dir, args.resource_path), args.resource_path)
        if args.config:
          diff_opt_file = get_config_file(args.config)
          naarad.utils.extract_diff_sla_from_config_file(diff_report, diff_opt_file)
        diff_report.generate()
      if args.exit_code & (diff_report.sla_failures > 0):
        sys.exit(CONSTANTS.SLA_FAILURE)
      sys.exit(0)   
    elif not args.config:
      print_usage()
      sys.exit(0)
    read_naarad_templates()
    if args.show_config:
      tmp_file = naarad.utils.download_file(template_urls[args.config])
      with open(tmp_file, 'r') as FH:
        print "----"
        print FH.read()
      sys.exit("----")

    optfile = get_config_file(args.config)
    indir_default = args.input_dir
    outdir_default = args.output_dir
    resource_path = args.resource_path
    #user defined variables in form "key=value"
    if args.variables:
      for var in args.variables:
        words = var.split('=')
        variables_dict[words[0]] = words[1]

    # Parse the config file
    # TODO: Refactor the config parsing code
    config_obj = ConfigParser.ConfigParser(variables_dict)
    # Preserve case http://stackoverflow.com/questions/1611799/preserve-case-in-configparser
    config_obj.optionxform = str
    config_obj.read(optfile)

    if config_obj.has_section('GLOBAL'):
      ts_start, ts_end = naarad.utils.parse_global_section(config_obj, 'GLOBAL')
      if config_obj.has_option('GLOBAL', 'user_defined_metrics'):
        naarad.utils.parse_user_defined_metric_classes(config_obj, metric_classes)
      config_obj.remove_section('GLOBAL')

    for section in config_obj.sections():
      # GRAPH section is optional
      if section == 'GRAPH':
        graphing_library, crossplots, outdir_default, indir_default, graph_timezone = \
          naarad.utils.parse_graph_section(config_obj, section, outdir_default, indir_default)
      elif section.startswith('RUN-STEP'):
        run_step = naarad.utils.parse_run_step_section(config_obj, section)
        if not run_step:
          logger.error('Ignoring section %s, could not parse it correctly', section)
          continue
        if run_step.run_order == CONSTANTS.PRE_ANALYSIS_RUN:
          pre_run_steps.append(run_step)
        # DURING_ANALYSIS_RUN not supported yet
        elif run_step.run_order == CONSTANTS.DURING_ANALYSIS_RUN:
          in_run_steps.append(run_step)
        elif run_step.run_order == CONSTANTS.POST_ANALYSIS_RUN:
          post_run_steps.append(run_step)
        else:
          logger.error('Unknown RUN-STEP run_order specified')
      else:
        # section name is used to create sub-directories, so enforce it. 
        if not naarad.utils.is_valid_metric_name(section):
          logger.critical('Section name %s is invalid! Only letters, digits, dot(.), dash(-), underscore(_) are allowed' % section)
          sys.exit(0)
        if section == 'SAR-*':
          hostname, infile, label, ts_start, ts_end, precision, kwargs, rule_strings = \
            naarad.utils.parse_basic_metric_options(config_obj, section)
          sar_metrics = naarad.utils.get_all_sar_objects(metrics, infile, hostname, outdir_default, label, ts_start,
                                                         ts_end, None)
          if config_obj.has_option(section, 'ignore') and config_obj.getint(section, 'ignore') == 1:
            for metric in sar_metrics:
              metric.ignore = True
          metrics.extend(sar_metrics)
        else:
          new_metric = naarad.utils.parse_metric_section(config_obj, section, metric_classes, metrics, aggregate_metric_classes, outdir_default, resource_path)
          new_metric.bin_path = bin_path          
          # put metrics in different thread groups 
          metric_type = section.split('-')[0]
          if metric_type in aggregate_metric_classes:
            aggregate_metrics.append(new_metric)
          else:
            metrics.append(new_metric)
    if args and args.start:
      ts_start = args.start
    if args and args.end:
      ts_end = args.end

    if outdir_default:
      try:
        os.makedirs(outdir_default)
      except OSError as exception:
        if exception.errno != errno.EEXIST:
          raise
      try:
        resource_directory = os.path.join(outdir_default, resource_path)
        os.makedirs(resource_directory)
      except OSError as exception:
        if exception.errno != errno.EEXIST:
          raise
      logger.info('Reports and the plots will be in ' + outdir_default)
    else:
      sys.exit("No output directory defined. Please use option -o, or update the config. Exiting...")

    if graph_timezone:
      logger.info('X-axis will be displayed in timezone: %s', graph_timezone)

    for run_step in sorted(pre_run_steps, key=lambda step: step.run_rank):
      run_step.run()
      if run_step.run_type == CONSTANTS.RUN_TYPE_WORKLOAD:
        workload_run_steps.append(run_step)
    # Get analysis time period from workload run steps
    if len(workload_run_steps) > 0:
      ts_start, ts_end = naarad.utils.get_run_time_period(workload_run_steps)

    threads = []
    graph_lock = threading.Lock()

    # ts_start in global section is overwritten by CLI -b option
    # CLI -b option is overwritten by ts_start in RUN-step section
    # ts_start in RUN-step section is overwritten by ts_start in metric section
    if ts_start:
      timestamp_format = naarad.utils.detect_timestamp_format(ts_start)
      ts_start = naarad.utils.get_standardized_timestamp(ts_start, timestamp_format)
    if ts_end:
      timestamp_format = naarad.utils.detect_timestamp_format(ts_end)
      ts_end = naarad.utils.get_standardized_timestamp(ts_end, timestamp_format)

    for metric in metrics:
      if ts_start and not metric.ts_start:
        metric.ts_start = ts_start
      if ts_end and not metric.ts_end:
        metric.ts_end = ts_end
      thread = threading.Thread(target=naarad.utils.parse_and_plot_single_metrics, args=(metric, graph_timezone,
                                                                                         outdir_default, indir_default,
                                                                                         graphing_library, graph_lock,
                                                                                         skip_plots))
      thread.start()
      threads.append(thread)
    for t in threads:
      t.join()
      
    # handling CLUSTER metric and other aggregate metrics, which has to wait for all regular metric threads to complete.   
    for metric in aggregate_metrics:
      thread = threading.Thread(target=naarad.utils.parse_and_plot_single_metrics, args=(metric, graph_timezone,
                                                                                         outdir_default, indir_default,
                                                                                         graphing_library, graph_lock,
                                                                                         skip_plots))
      thread.start()
      threads.append(thread)
    for t in threads:
      t.join()

    if len(crossplots) > 0:
      correlated_plots = naarad.utils.nway_plotting(crossplots, metrics, resource_directory, resource_path)
    else:
      correlated_plots = []      
    rpt = Report(None, outdir_default, resource_directory, resource_path, metrics + aggregate_metrics, correlated_plots=correlated_plots)
    rpt.generate()

    for run_step in sorted(post_run_steps, key=lambda step: step.run_rank):
      run_step.run()

  if args.exit_code:
    for metric in metrics + aggregate_metrics:
      if metric.status == CONSTANTS.SLA_FAILED:
        sys.exit(CONSTANTS.SLA_FAILURE)

if __name__ == '__main__':
  main()
